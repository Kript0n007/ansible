name: IaC full pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  TF_VERSION: "1.8.0"
  ANSIBLE_VERSION: "2.16.4"
  AWS_DEFAULT_REGION: "us-east-1"
  AWS_REGION: "us-east-1"  

jobs:
  provision_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Save SSH public key to tfvars
        run: |
          echo 'public_key = "${{ secrets.SSH_PUBLIC_KEY }}"' > infra/public_key.auto.tfvars

      - name: Terraform Init
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:    ${{ env.AWS_DEFAULT_REGION }}
        run: terraform init

      - name: Importar Key Pair e Security Group se já existirem
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:    ${{ env.AWS_DEFAULT_REGION }}
        run: |
          set -e
          echo "🔍  Verificando chave SSH…"
          if aws ec2 describe-key-pairs --key-names iac_key >/dev/null 2>&1; then
            terraform import aws_key_pair.iac_key iac_key
          else
            echo "   → KeyPair não existe; será criada pelo apply."
          fi

          echo "🔍  Verificando Security Group…"
          SG_ID=$(aws ec2 describe-security-groups \
                    --filters Name=group-name,Values=iac_sg \
                    --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || true)

          if [ -n "$SG_ID" ] && [ "$SG_ID" != "None" ]; then
            terraform import aws_security_group.iac_sg "$SG_ID"
          else
            echo "   → SecurityGroup não existe; será criado pelo apply."
          fi

      - name: Terraform Apply
        id: tfapply
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION:    ${{ env.AWS_DEFAULT_REGION }}
        run: |
          terraform apply -auto-approve
          IP=$(terraform output -raw instance_public_ip)

          # grava o arquivo de inventário sem espaços extras
          echo "[app]"                                    >  ../provision/inventory.ini
          echo "$IP ansible_user=ubuntu ansible_ssh_private_key_file=../private_key.pem" \
                                                        >> ../provision/inventory.ini

      - name: Setup Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible docker
          ansible-galaxy collection install community.docker

      - name: Salvar chave privada em arquivo
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Run Ansible Playbook
        working-directory: provision
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          ansible-playbook -i inventory.ini playbook.yml --private-key ../private_key.pem
